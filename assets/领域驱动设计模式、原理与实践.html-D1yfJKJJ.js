import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as a,o as n}from"./app-ROPDmvpc.js";const r={};function p(s,e){return n(),o("div",null,e[0]||(e[0]=[a('<p>软件行为由领域模型控制。只要将领域逻辑与技术问题相隔离，就能实现模型驱动设计，从而实现领域驱动设计。</p><p>领域模型实现模式分为领域模型、事务脚本、表模块。</p><h4 id="领域模型" tabindex="-1"><a class="header-anchor" href="#领域模型"><span>领域模型</span></a></h4><h4 id="事务脚本" tabindex="-1"><a class="header-anchor" href="#事务脚本"><span>事务脚本</span></a></h4><blockquote><p>事务脚本模式遵循开发的程序化风格而非面向对象方法。通常会为每个业务事务创建单个程序，并且它是按照某种静态管理器或服务类来分组的。每个程序都包含所有需要的业务逻辑，以完成从工作流、业务规则和验证检查到数据库中持久性的业务事务。</p></blockquote><p>即事务脚本将事务封装成一个个的脚本，是面向过程的。它可用于领域中具有很少逻辑或不具有逻辑的部分。一个操作的所有逻辑都包含在单个服务方法中。</p><h4 id="表模块" tabindex="-1"><a class="header-anchor" href="#表模块"><span>表模块</span></a></h4><blockquote><p>表模块模式会将对象模型映射到数据库模型。单个对象代表着数据库中的一个表或视图。该对象负责与业务逻辑行为一起的所有持久化需要。</p></blockquote><p>当领域中有上下文隔离时，简单数据形式可以采用这一模式，即数据库驱动设计；但模型对象和数据库对象开始不一致时，就需要向领域模型方向重构。</p><h5 id="活动记录" tabindex="-1"><a class="header-anchor" href="#活动记录"><span>活动记录</span></a></h5><blockquote><p>活动记录是表模块模式的变体，它是将对象映射到表的行，而不是用对象表示表自身。一个对象表示一个位于瞬时状态或处于修改中的数据库行（记录）。</p><p>在活动记录模式中，每个业务对象都负责其自身的持久化以及相关业务逻辑。</p></blockquote><h4 id="贫血领域模型" tabindex="-1"><a class="header-anchor" href="#贫血领域模型"><span>贫血领域模型</span></a></h4><p>将领域对象仅作为简单数据传输类（POCO：Plain Old CLR Obect<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>），领域服务实现具体的业务逻辑，类似于事务脚本。</p><h5 id="结合函数式编程" tabindex="-1"><a class="header-anchor" href="#结合函数式编程"><span>结合函数式编程</span></a></h5><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><a href="https://enterprisecraftsmanship.com/posts/dto-vs-value-object-vs-poco/" target="_blank" rel="noopener noreferrer">DTO vs Value Object vs POCO · Enterprise Craftsmanship</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',16)]))}const l=t(r,[["render",p],["__file","领域驱动设计模式、原理与实践.html.vue"]]),h=JSON.parse('{"path":"/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5.html","title":"《领域驱动设计模式、原理与实践》笔记","lang":"zh-CN","frontmatter":{"title":"《领域驱动设计模式、原理与实践》笔记","date":"2024-06-19T00:00:00.000Z","category":"读书笔记","tag":"DDD","description":"软件行为由领域模型控制。只要将领域逻辑与技术问题相隔离，就能实现模型驱动设计，从而实现领域驱动设计。 领域模型实现模式分为领域模型、事务脚本、表模块。 领域模型 事务脚本 事务脚本模式遵循开发的程序化风格而非面向对象方法。通常会为每个业务事务创建单个程序，并且它是按照某种静态管理器或服务类来分组的。每个程序都包含所有需要的业务逻辑，以完成从工作流、业务...","head":[["meta",{"property":"og:url","content":"https://mioor.top/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5.html"}],["meta",{"property":"og:site_name","content":"MIOOR"}],["meta",{"property":"og:title","content":"《领域驱动设计模式、原理与实践》笔记"}],["meta",{"property":"og:description","content":"软件行为由领域模型控制。只要将领域逻辑与技术问题相隔离，就能实现模型驱动设计，从而实现领域驱动设计。 领域模型实现模式分为领域模型、事务脚本、表模块。 领域模型 事务脚本 事务脚本模式遵循开发的程序化风格而非面向对象方法。通常会为每个业务事务创建单个程序，并且它是按照某种静态管理器或服务类来分组的。每个程序都包含所有需要的业务逻辑，以完成从工作流、业务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-28T11:54:12.000Z"}],["meta",{"property":"article:author","content":"MIOOR"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:published_time","content":"2024-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-28T11:54:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《领域驱动设计模式、原理与实践》笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-28T11:54:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MIOOR\\",\\"url\\":\\"http://mioor.top\\"}]}"]]},"headers":[],"git":{"createdTime":1730116452000,"updatedTime":1730116452000,"contributors":[{"name":"MIOOR","email":"yangwenyao07@gmail.com","commits":1}]},"readingTime":{"minutes":1.88,"words":565},"filePathRelative":"posts/读书笔记/领域驱动设计模式、原理与实践.md","localizedDate":"2024年6月19日","excerpt":"<p>软件行为由领域模型控制。只要将领域逻辑与技术问题相隔离，就能实现模型驱动设计，从而实现领域驱动设计。</p>\\n<p>领域模型实现模式分为领域模型、事务脚本、表模块。</p>\\n<h4>领域模型</h4>\\n<h4>事务脚本</h4>\\n<blockquote>\\n<p>事务脚本模式遵循开发的程序化风格而非面向对象方法。通常会为每个业务事务创建单个程序，并且它是按照某种静态管理器或服务类来分组的。每个程序都包含所有需要的业务逻辑，以完成从工作流、业务规则和验证检查到数据库中持久性的业务事务。</p>\\n</blockquote>\\n<p>即事务脚本将事务封装成一个个的脚本，是面向过程的。它可用于领域中具有很少逻辑或不具有逻辑的部分。一个操作的所有逻辑都包含在单个服务方法中。</p>","autoDesc":true}');export{l as comp,h as data};
