import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,e as n,r as t,o as h}from"./app-ROPDmvpc.js";const p="/assets/image-20230923100250447-DOTTf-Xp.png",d="/assets/WPF%E7%B1%BB%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.drawio-DGVAkR5M.svg",r="/assets/ch18fg03-CVLySB1H.png",k={};function c(o,i){const s=t("Mermaid");return h(),e("div",null,[i[0]||(i[0]=a('<h2 id="设计流程" tabindex="-1"><a class="header-anchor" href="#设计流程"><span>设计流程</span></a></h2><p>参考：《亲爱的界面：让用户乐于使用、爱不释手（第2版）》</p><p>产品开发的三个阶段：研究、设计和实施。</p><h3 id="研究" tabindex="-1"><a class="header-anchor" href="#研究"><span>研究</span></a></h3><p>开始设计产品时，搞清楚产品的<strong>用户对象</strong>是谁，你所<strong>要解决的问题</strong>是什么。</p><h3 id="设计" tabindex="-1"><a class="header-anchor" href="#设计"><span>设计</span></a></h3><p>这时你要考虑如何解决用户的问题。设计出方案，并在编写代码之前对其进行测试。<strong>在纸上修正错误比通过代码要容易得多</strong>。</p><p>从<strong>设计的角度</strong>来看，这一阶段可能是整个开发过程中<strong>最重要的部分</strong>。</p><h3 id="实施" tabindex="-1"><a class="header-anchor" href="#实施"><span>实施</span></a></h3><p>创建产品，并持续进行测试。这一阶段要回答的问题包括：</p><ul><li>前期假设是否正确？</li><li>设计方案是否有效？</li><li>产品运行时人们如何与它进行交互？</li><li>方案的实施结果是否满意？</li><li>产品如何对错误和真实的数据进行处理？</li><li>它的运行表现是否够好？</li></ul><h2 id="wpf-概述" tabindex="-1"><a class="header-anchor" href="#wpf-概述"><span>WPF 概述</span></a></h2><p>WPF 中所有绘图相关的操作是由 DirectX 完成的，仅有处理和路由输入信息以及区分哪个应用程序实际拥有屏幕的哪一部分是依赖 User32 的。</p><h3 id="像素单位" tabindex="-1"><a class="header-anchor" href="#像素单位"><span>像素单位</span></a></h3><p>WPF 窗口以及其中的所有元素都使用与设备无关的单位进行度量。一个与设备无关的单位被定义为1/96英寸。实际显示的大小为：物理单位尺寸 = 设备无关单位尺寸 * 系统 DPI。</p><h3 id="wpf-体系结构" tabindex="-1"><a class="header-anchor" href="#wpf-体系结构"><span>WPF 体系结构</span></a></h3><figure><img src="'+p+'" alt="WPF 体系结构" tabindex="0" loading="lazy"><figcaption>WPF 体系结构</figcaption></figure><ul><li>PresentationFramework.dll 包含 WPF 顶层的类型，包括那些表示窗口、面板以及其他类型控件的类型。它还实现了高层编程抽象，如样式。开发人员直接使用的大部分类都来自这个程序集。</li><li>PresentationCore.dll 包含了基础类型，如 UIElement 类和 Visual 类，所有形状类和控件类都继承自这两个类。如果不需要窗口和控件抽象层的全部特征，可使用这一层，而且仍能利用 WPF 的渲染引擎。</li><li>WindowsBase.dll 包含了更多基本要素，这些要素具有在 WPF 之外重用的潜能，如 DispatcherObject 类和 DependencyObject 类，这两个类引入了依赖项属性。</li><li>milcore.dll 是 WPF 渲染系统的核心，也是媒体集成层（Media Integration Layer，MIL）的基础。其合成引擎将可视化元素转换为 Direct3D 所期望的三角形和纹理。尽管将 milcore.dll 视为 WPF 的一部分，但它也是 Windows Vista 和 Windows7 的核心系统组件之一。实际上，桌面窗口管理器（Desktop Window Manager，DWM）使用 milcore.dll 渲染桌面。</li><li>VindowsCodecs.dll 是一套提供图像支持的低级API（例如处理、显示以及缩放位图和 JPEG 图像）。</li><li>Direct3D 是一套低级 API，WPF 应用程序中的所有图形都由它进行渲染。</li><li>User32 用于决定哪些程序实际占有桌面的哪一部分。所以它仍被包含在 WPF 中，但不再负责渲染通用控件。</li></ul><h4 id="类层次结构" tabindex="-1"><a class="header-anchor" href="#类层次结构"><span>类层次结构</span></a></h4><figure><img src="'+d+'" alt="WPF类的层次结构" tabindex="0" loading="lazy"><figcaption>WPF类的层次结构</figcaption></figure><ol><li><p>System.Threading.DispatcherObject<br> WPF 应用程序使用单线程亲和（Single-Thread Affinity，STA）模型，即整个用户界面由单个线程拥有。从另一个线程与用户界面元素进行交互是不安全的。为方便使用此模型，每个 WPF 应用程序由协调消息（键盘输入、鼠标移动乃至框架处理，如布局）的调度程序管理。</p><p>通过继承自 DispatcherObject 类，用户界面中的每个元素都可以检查代码是否在正确的线程上运行，并能通过访问调度程序为用户界面线程封送代码。</p></li><li><p>System.Windows.DependencyObject</p><p>在 WPF 中，主要通过属性与屏幕上的元素进行交互。在早期设计阶段，WPF 的设计者决定创建一个更加强大的属性模型，该模型支持许多特性，例如更改通知、默认值继承以及减少属性存储空间。最终结果就是依赖项属性（dependency property）特性。</p><p>通过继承自 DependencyObject 类，WPF 类可获得对依赖项属性的支持。</p></li><li><p>System.Windows.Media.Visual</p><p>在 WPF 窗口中显示的每个元素本质上都是 Visual 对象。可将 Visual 类视为绘图对象，其中封装了绘图指令、如何执行绘图的附加细节（如剪裁、透明度以及变换设置）以及基本功能（如命中测试)。Visual 类还在托管的 WPF 库和渲染桌面的 milcore.dll 程序集之间提供了链接。</p><p>任何继承自 Visual 的类都能在窗口上显示出来。如果更愿意使用轻量级的 API 创建用户界面，而不想使用 WPF 的高级框架特征，直接对 Visual 对象进行编程。</p></li><li><p>System.Windows.UlElement</p><p>UIElement 类增加了对 WPF 本质特征的支持，如布局、输入、焦点和事件（WPF 团队使用首字母缩写词 LIFE 来表示）。例如，这里定义两个步骤的测量和排列布局过程。在该类中，原始的鼠标单击和按键操作被转换为更有用的事件，如 MouseEnter 事件。与属性类似，WPF 实现了增强的称为路由事件（routed event）的事件路由系统。最后，UIElement 类中还添加了对命令的支持。</p></li><li><p>System.Windows.FrameworkElement</p><p>FrameworkElement 类是 WPF 核心继承树中的最后一站。该类实现了一些全部由 UIElement 类定义的成员。例如，UIElement 类为 WPF 布局系统设置了基础，但 FrameworkElement 类提供了支持它的重要属性（如 HorizontalAlignment 和 Margin 属性）。UIElement 类还添加了对数据绑定、动画以及样式等核心特性的支持。</p></li><li><p>System.Windows.Shapes.Shape</p><p>基本的形状类（如 Rectangle 类、Polygon 类、Ellipse 类、Line 类以及 Path 类）都继承自该类。可将这些形状类与更传统的 Windows 小组件（如按钮和文本框）结合使用。</p></li><li><p>System.Windows.Controls.Control</p><p>控件（control）是可与用户进行交互的元素。控件显然包括 TextBox 类、Button 类和 ListBox 类等。Control 类为设置字体以及前景色与背景色提供了附加属性。但最令人感兴趣的细节是模板支持，通过模板支持，可使用自定义风格的绘图替换控件的标准外观。</p></li><li><p>System.Windows.Controls.ContentControl</p><p>ContentControl 类是所有具有单一内容的控件的基类，包括简单的标签乃至窗口的所有内容。该模型的特点是控件中的单一内容可以是普通字符串乃至具有其他形状和控件组合的布局面板。</p></li><li><p>System.Windows.Controls.ItemsControl</p><p>ItemsControl 类是所有显示选项集合的控件的基类，如 ListBox 和 TreeView 控件。列表控件十分灵活一例如，使用 ItemsControl 类的内置特征，可将简单的 ListBox 控件变换成单选按钮列表、复选框控件列表、平铺的图像或是您所选择的完全不同的元素的组合。实际上，WPF 中的菜单、工具栏以及状态栏都是特定的列表，并且实现它们的类都继承自 ItemsContorl 类。</p></li><li><p>System.Windows.Controls.Panel</p><p>Panel 类是所有布局容器的基类，布局容器是可包含一个或多个子元素、并按特定规则对子元素进行排列的元素。这些容器是 WPF 布局系统的基础，要以最富有吸引力、最灵活的方式安排内容，使用这些容器是关键所在。在第3章将详述 WPF 布局系统。</p></li></ol><h2 id="xaml" tabindex="-1"><a class="header-anchor" href="#xaml"><span>XAML</span></a></h2><p>XAML（Extensible Application Markup Language 的简写，发音为“zammel”）是用于实例化 .NET 对象的标记语言。</p><p>BAML（Binary Application Markup Language, 二进制应用程序标记语言）是 XAML 的二进制表示。当在 Visual Studio 中编译 WPF 应用程序时，所有 XAML 文件都被转换为 BAML ，这些 BAML 然后作为资源被嵌入到最终的 DLL 或 EXE 程序集中。</p><h3 id="xaml-基础" tabindex="-1"><a class="header-anchor" href="#xaml-基础"><span>XAML 基础</span></a></h3><ul><li>XAML 文档中的每个元素都映射为 .NET 类的一个实例。元素的名称也完全对应于类名。例如，元素 &lt;Button&gt; 指示 WPF 创建 Button 对象。</li><li>与所有 XML 文档一样，可在一个元素中嵌套另一个元素。但嵌套通常是一种表示“包含”的方法——换句话说，如果在一个 Grid 元素中发现一个 Button 元素，那么用户界面可能包括一个在其内部包含一个 Button 元素的 Grid 元素。</li><li>可通过特性（attribute）设置每个类的属性（property）。但在某些情况下，特性不足以完成这项工作。对于此类情况，需要通过特殊的语法使用嵌套的标签（tag）。</li></ul><h4 id="代码隐藏类" tabindex="-1"><a class="header-anchor" href="#代码隐藏类"><span>代码隐藏类</span></a></h4><h5 id="initializecomponent-方法" tabindex="-1"><a class="header-anchor" href="#initializecomponent-方法"><span>InitializeComponent() 方法</span></a></h5><p>InitializeComponent() 方法在源代码中不可见，因为它是在编译应用程序时自动生成的。本质上，InitializeComponent() 方法的所有工作就是调用 System.Windows.Application 类的 LoadComponent() 方法。LoadComponent() 方法从程序集中提取 BAML (编译过的 XAML），并用它来构建用户界面。<strong>当解析 BAML 时，它会创建每个控件对象，设置其属性，并关联所有事件处理程序</strong>。</p><h5 id="简单属性与类型转换器" tabindex="-1"><a class="header-anchor" href="#简单属性与类型转换器"><span>简单属性与类型转换器</span></a></h5>',30)),n(s,{id:"mermaid-252",code:"eJxLL0osyOAyjFaKcPT1ebJj7fNZLU/XTn++ZtmTHZuebpz3rGG5UqyCrq6unVE0SMWL5YufzZvwdOYKiKCCcbUSRNXTxRuezegDGmCTVKRv92zG+qcTlj3rn/Bk32ywQEhlQapzfl5ZalFJatHzzp0gc2uBRtjVAJXWKJhEv9jQ/HzKilguLmOwKFB3jYIp0PD1O5/umvJs6oZnveueb9z9dF430IEgBhbrnuzdDzQC0zoNsFAJUCg/TaOiogIuoQmW0MR0jhncOaYI15hHP58y/1nHhJdTZr5Yvz6WCwBbCZ3C"}),i[1]||(i[1]=a('<p>注：</p><p>与所有基于 XML 的语言一样，XAML 也区分大小写。这意味着不能用 &lt;button&gt; 替代 &lt;Button&gt; 。然而，类型转换器通常不区分大小写，这意味着 <code>Foreground=&quot;White&quot;</code> 和 <code>Foreground=&quot;white&quot;</code> 具有相同的效果。</p><h4 id="特殊字符与空白" tabindex="-1"><a class="header-anchor" href="#特殊字符与空白"><span>特殊字符与空白</span></a></h4><p>XAML 受到 XML 规则限制。对于一些特殊符号，想要直接使用，需用字符实体来表示。</p><table><thead><tr><th>特殊字符</th><th>字符实体</th></tr></thead><tbody><tr><td>小于号（≤）</td><td>&amp;lt;</td></tr><tr><td>大于号（&gt;）</td><td>&amp;gt;</td></tr><tr><td>&amp; 符号（&amp;）</td><td>&amp;amp;</td></tr><tr><td>引号（&quot;）</td><td>&amp;quot;</td></tr></tbody></table><p>希望在按钮文本中包含一系列空格。在这种情况下，需要为元素使用 <code>xml:space=&quot;preserve&quot;</code> 特性。<code>xml:space</code> 特性是 XML 标准的一部分，是一个要么包括全部、要么什么都不包括的设置。一旦使用了该设置，元素内的所有空白字符都将被保留。</p><h3 id="创建-wpf-应用程序的三种方式" tabindex="-1"><a class="header-anchor" href="#创建-wpf-应用程序的三种方式"><span>创建 WPF 应用程序的三种方式</span></a></h3><ul><li><p>只使用代码</p><p>这是在 Visual Studio 中为 Windows 窗体应用程序使用的传统方法。</p></li><li><p>使用代码和未编译过的标记（XAML）</p><p>这种方式在运行时使用 System.Windows.Markup 名称空间中的 XamlReader 类，从 XAML 文件中加载部分用户界面。</p></li><li><p>使用代码和编译过的标记（BAML）</p><p>使用代码和编译过的标记（BAML）。对于 WPF 而言这是一种更好的方式，也是 Visual Studio 支持的一种方式。这种方式为每个窗口创建一个 XAML 模板，这个 XAML 模板被编译为 BAML，并嵌入到最终的程序集中。编译过的 BAML 在运行时被提取出来，用于重新生成用户界面。</p></li></ul><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局"><span>布局</span></a></h2><h3 id="布局原则" tabindex="-1"><a class="header-anchor" href="#布局原则"><span>布局原则</span></a></h3><ul><li><p>不应显式设定元素（如控件）的尺寸。</p><p>元素应当可以改变尺寸以适合它们的内容。例如，当添加更多的文本时按钮应当能够扩展。可通过设置最大和最小尺寸来限制可以接受的控件尺寸范围。</p></li><li><p>不应使用屏幕坐标指定元素的位置。</p><p>元素应当由它们的容器根据它们的尺寸、顺序以及（可选的）其他特定于具体布局容器的信息进行排列。如果需要在元素之间添加空白空间，可使用 Margin 属性。</p></li><li><p>布局容器的子元素“共享”可用的空间。</p><p>如果空间允许，布局容器会根据每个元素的内容尽可能为元素设置更合理的尺寸。它们还会向一个或多个子元素分配多余的空间。</p></li><li><p>可嵌套的布局容器。</p><p>典型的用户界面使用 Grid 面板作为开始，Grid 面板是 WPF 中功能最强大的容器，Grid 面板可包含其他布局容器，包含的这些容器以更小的分组排列元素，比如带有标题的文本框、列表框中的项、工具栏上的图标以及一列按钮等。</p></li></ul><h3 id="核心布局面板" tabindex="-1"><a class="header-anchor" href="#核心布局面板"><span>核心布局面板</span></a></h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>StackPanel</td><td>在水平或垂直的堆栈中放置元素。这个布局容器通常用于更大、更复杂窗口中的一些小区域</td></tr><tr><td>WrapPanel</td><td>在一系列可换行的行中放置元素。在水平方向上， WrapPanel 面板从左向右放置条目，然后在随后的行中放置元素。在垂直方向上，WrapPanel 面板在自上而下的列中放置元素，并使用附加的列放置剩余的条目</td></tr><tr><td>DockPanel</td><td>根据容器的整个边界调整元素</td></tr><tr><td>Grid</td><td>根据不可见的表格在行和列中排列元素，这是最灵活、最常用的容器之一</td></tr><tr><td>UniformGrid</td><td>在不可见但是强制所有单元格具有相同尺寸的表中放置元素，这个布局容器不常用</td></tr><tr><td>Canvas</td><td>使用固定坐标绝对定位元素。这个布局容器与传统 Windows 窗体应用程序最相似，但没有提供锚定或停靠功能。因此，对于尺寸可变的窗口，该布局容器不是合适的选择。如果选择的话，需要另外做一些工作</td></tr></tbody></table><h2 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h2><h3 id="各层级间的关系" tabindex="-1"><a class="header-anchor" href="#各层级间的关系"><span>各层级间的关系</span></a></h3><p><a href="https://learn.microsoft.com/zh-cn/xamarin/xamarin-forms/creating-mobile-apps-xamarin-forms/summaries/chapter18" target="_blank" rel="noopener noreferrer">参考</a></p><p><strong>模型对视图模型未知，视图模型对视图未知。</strong> 这三层通常使用以下机制相互连接：</p><figure><img src="'+r+'" alt="View、ViewModel 和 View" tabindex="0" loading="lazy"><figcaption>View、ViewModel 和 View</figcaption></figure><p>在许多<strong>较小</strong>的程序（<strong>甚至更大</strong>的程序）中，模型通常是<strong>不存在的</strong>，或它的功能<strong>集成到视图模型中</strong>。</p><div class="hint-container note"><p class="hint-container-title">注</p><ul><li>View 层仅通过数据绑定与 ViewModel 建立联系，所以 ViewModel 对 View 未知。</li><li>当 Model 作为 ViewModel 的成员对象时，Model 对 ViewModel 未知。</li></ul></div><h2 id="绑定" tabindex="-1"><a class="header-anchor" href="#绑定"><span>绑定</span></a></h2><h3 id="绑定到非元素对象" tabindex="-1"><a class="header-anchor" href="#绑定到非元素对象"><span>绑定到非元素对象</span></a></h3><h4 id="source" tabindex="-1"><a class="header-anchor" href="#source"><span>Source</span></a></h4><p>该属性是指向源对象的引用。换句话说，是提供数据的对象。</p><h4 id="relativatesource" tabindex="-1"><a class="header-anchor" href="#relativatesource"><span>RelativateSource</span></a></h4><p>编写控件模板时，子元素可在 RelativateSource 绑定的路径下查找和绑定对象。</p><h4 id="datacontext" tabindex="-1"><a class="header-anchor" href="#datacontext"><span>DataContext</span></a></h4><p>没有上述两个属性源指定对象时，就从该元素树中查找。在符合要求的元素中使用第一个有非空的 DataContext 属性的元素。</p><h3 id="绑定模式" tabindex="-1"><a class="header-anchor" href="#绑定模式"><span>绑定模式</span></a></h3><p><code>Binding.Mode</code> 的属性设置。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>OneWay</td><td>当源属性变化时更新目标属性</td></tr><tr><td>TwoWay</td><td>当源属性变化时更新目标属性，并且当目标属性变化时更新源属性</td></tr><tr><td>OneTime</td><td>最初根据源属性值设置目标属性。然而，其后的所有改变都会被忽略（除非绑定被设置为一个完全不同的对象或者调用 BindingExpression.UpDateTarget() 方法，正如稍后介绍的那样）。通常，如果知道源属性不会变化，可使用这种模式降低开销</td></tr><tr><td>OneWayToSource</td><td>与 OneWay 类型类似，但方向相反。当目标属性变化时更新源属性（这看起来有点像向后传递)，但目标属性永远不会被更新</td></tr><tr><td>Default</td><td>此类绑定依赖于目标属性。既可以是双向的（对于用户可以设置的属性，如 TextBox.Text 属性），也可以是单向的（对于所有其他属性）。除非明确指定了另一种模式，否则所有绑定都使用该方法</td></tr></tbody></table><p>数据流向图</p>',32)),n(s,{id:"mermaid-568",code:"eJxLL0osyFDwCeIqLk2CsA2jlZ7tmvB0/c4XGxdqhGWmlmsqxXJxGuoZRj/dOO9Zw/JYrtS8FC6EeqNopeez1z1b0I6kxTc/JTUHrM8IqE/pyb65L7ZOe7lwJ8QEjZcNs17sb3++e+LTdbNerNv3fO86kFqwsUB7FHR17Wr881LDEytrFID6uYAYSSwkPzi/tCg5tUYBqBas3gYkGVKeD9cAAN/4V0g="}),i[2]||(i[2]=a(`<h3 id="手动编写绑定" tabindex="-1"><a class="header-anchor" href="#手动编写绑定"><span>手动编写绑定</span></a></h3><h4 id="icommand-绑定" tabindex="-1"><a class="header-anchor" href="#icommand-绑定"><span>ICommand 绑定</span></a></h4><p>Click 绑定类的实现</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 命令类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RelayCommond</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ICommand</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">summary</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 命令是否能够执行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">summary</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">summary</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// 命令需要执行的方法</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /// </span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">summary</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    readonly</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Action</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RelayCommond</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Action</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        _execute</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        _canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CanExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">_canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        _execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> event</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EventHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CanExecuteChanged</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        add</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">_canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">                CommandManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">RequerySuggested</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        remove</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">_canExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">                CommandManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">RequerySuggested</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> -=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="inotifypropertychanged-绑定" tabindex="-1"><a class="header-anchor" href="#inotifypropertychanged-绑定"><span>INotifyPropertyChanged 绑定</span></a></h4><p>View 可从绑定数据更新的条件：</p><ol><li>需绑定的类的属性是 public 且要实现 <code>get</code> 方法。</li><li>类需实现 <code>INotifyPropertyChanged</code> 接口。</li></ol><p>ViewModel 创建方法</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" data-title="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ViewModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">INotifyPropertyChanged</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 关键代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 	void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LoginFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 实现   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CanLoginExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ICommand</span><span style="--shiki-light:#4078F2;--shiki-dark:#ABB2BF;"> LoginAction</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        get</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RelayCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">LoginFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">CanLoginExecute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>View 绑定</p><div class="language-xaml line-numbers-mode" data-highlighter="shiki" data-ext="xaml" data-title="xaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;!-- DataContext默认绑定ViewModel实例 --&gt;</span></span>
<span class="line"><span>&lt;Button Command=&quot;{Binding LoginAction}&quot; /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板类型" tabindex="-1"><a class="header-anchor" href="#模板类型"><span>模板类型</span></a></h2><h3 id="控件模板" tabindex="-1"><a class="header-anchor" href="#控件模板"><span>控件模板</span></a></h3><p>用于确定如何渲染控件。</p><h3 id="数据模板" tabindex="-1"><a class="header-anchor" href="#数据模板"><span>数据模板</span></a></h3><p>用于从对象中提取数据，并在内容控件或列表控件的各项中显示数据。</p><h3 id="面板模板" tabindex="-1"><a class="header-anchor" href="#面板模板"><span>面板模板</span></a></h3><p>用于控制列表控件（继承至 ItemsControl 类的控件）中各项的布局。</p><h2 id="icommand-接口" tabindex="-1"><a class="header-anchor" href="#icommand-接口"><span>ICommand 接口</span></a></h2><h3 id="执行逻辑" tabindex="-1"><a class="header-anchor" href="#执行逻辑"><span>执行逻辑</span></a></h3>`,20)),n(s,{id:"mermaid-632",code:"eJxLL0osyOByzs+NVnq+u+XJ7m1KsQq6urp2NUrPpm541rvu+e6JT9fNejZ924sNzc+nrFCqUXAzjFZyTsxzrUhNLi1J1dCEa3ixf8rT2fPcEnOKU4Hqny9rBKqHmPmifdWLXauBeoH2cLkZoqgPKSoFKX+xbt/zveue7OoGKn+6pOX5hDaQVUbIVjlnJOalp6YoxYKcCzNj+bKn/RMh2lAcaYzuSC4A04VxCg=="})])}const B=l(k,[["render",c],["__file","WPF笔记.html.vue"]]),y=JSON.parse('{"path":"/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/WPF%E7%AC%94%E8%AE%B0.html","title":"WPF 应用设计","lang":"zh-CN","frontmatter":{"title":"WPF 应用设计","date":"2023-09-13T00:00:00.000Z","category":"软件开发","tag":"WPF","description":"设计流程 参考：《亲爱的界面：让用户乐于使用、爱不释手（第2版）》 产品开发的三个阶段：研究、设计和实施。 研究 开始设计产品时，搞清楚产品的用户对象是谁，你所要解决的问题是什么。 设计 这时你要考虑如何解决用户的问题。设计出方案，并在编写代码之前对其进行测试。在纸上修正错误比通过代码要容易得多。 从设计的角度来看，这一阶段可能是整个开发过程中最重要的...","head":[["meta",{"property":"og:url","content":"https://mioor.top/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/WPF%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"MIOOR"}],["meta",{"property":"og:title","content":"WPF 应用设计"}],["meta",{"property":"og:description","content":"设计流程 参考：《亲爱的界面：让用户乐于使用、爱不释手（第2版）》 产品开发的三个阶段：研究、设计和实施。 研究 开始设计产品时，搞清楚产品的用户对象是谁，你所要解决的问题是什么。 设计 这时你要考虑如何解决用户的问题。设计出方案，并在编写代码之前对其进行测试。在纸上修正错误比通过代码要容易得多。 从设计的角度来看，这一阶段可能是整个开发过程中最重要的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T08:48:57.000Z"}],["meta",{"property":"article:author","content":"MIOOR"}],["meta",{"property":"article:tag","content":"WPF"}],["meta",{"property":"article:published_time","content":"2023-09-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T08:48:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WPF 应用设计\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T08:48:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MIOOR\\",\\"url\\":\\"http://mioor.top\\"}]}"]]},"headers":[{"level":2,"title":"设计流程","slug":"设计流程","link":"#设计流程","children":[{"level":3,"title":"研究","slug":"研究","link":"#研究","children":[]},{"level":3,"title":"设计","slug":"设计","link":"#设计","children":[]},{"level":3,"title":"实施","slug":"实施","link":"#实施","children":[]}]},{"level":2,"title":"WPF 概述","slug":"wpf-概述","link":"#wpf-概述","children":[{"level":3,"title":"像素单位","slug":"像素单位","link":"#像素单位","children":[]},{"level":3,"title":"WPF 体系结构","slug":"wpf-体系结构","link":"#wpf-体系结构","children":[]}]},{"level":2,"title":"XAML","slug":"xaml","link":"#xaml","children":[{"level":3,"title":"XAML 基础","slug":"xaml-基础","link":"#xaml-基础","children":[]},{"level":3,"title":"创建 WPF 应用程序的三种方式","slug":"创建-wpf-应用程序的三种方式","link":"#创建-wpf-应用程序的三种方式","children":[]}]},{"level":2,"title":"布局","slug":"布局","link":"#布局","children":[{"level":3,"title":"布局原则","slug":"布局原则","link":"#布局原则","children":[]},{"level":3,"title":"核心布局面板","slug":"核心布局面板","link":"#核心布局面板","children":[]}]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[{"level":3,"title":"各层级间的关系","slug":"各层级间的关系","link":"#各层级间的关系","children":[]}]},{"level":2,"title":"绑定","slug":"绑定","link":"#绑定","children":[{"level":3,"title":"绑定到非元素对象","slug":"绑定到非元素对象","link":"#绑定到非元素对象","children":[]},{"level":3,"title":"绑定模式","slug":"绑定模式","link":"#绑定模式","children":[]},{"level":3,"title":"手动编写绑定","slug":"手动编写绑定","link":"#手动编写绑定","children":[]}]},{"level":2,"title":"模板类型","slug":"模板类型","link":"#模板类型","children":[{"level":3,"title":"控件模板","slug":"控件模板","link":"#控件模板","children":[]},{"level":3,"title":"数据模板","slug":"数据模板","link":"#数据模板","children":[]},{"level":3,"title":"面板模板","slug":"面板模板","link":"#面板模板","children":[]}]},{"level":2,"title":"ICommand 接口","slug":"icommand-接口","link":"#icommand-接口","children":[{"level":3,"title":"执行逻辑","slug":"执行逻辑","link":"#执行逻辑","children":[]}]}],"git":{"createdTime":1730116452000,"updatedTime":1730450937000,"contributors":[{"name":"MIOOR","email":"yangwenyao07@gmail.com","commits":3}]},"readingTime":{"minutes":14.4,"words":4321},"filePathRelative":"posts/软件开发/WPF笔记.md","localizedDate":"2023年9月13日","excerpt":"<h2>设计流程</h2>\\n<p>参考：《亲爱的界面：让用户乐于使用、爱不释手（第2版）》</p>\\n<p>产品开发的三个阶段：研究、设计和实施。</p>\\n<h3>研究</h3>\\n<p>开始设计产品时，搞清楚产品的<strong>用户对象</strong>是谁，你所<strong>要解决的问题</strong>是什么。</p>\\n<h3>设计</h3>\\n<p>这时你要考虑如何解决用户的问题。设计出方案，并在编写代码之前对其进行测试。<strong>在纸上修正错误比通过代码要容易得多</strong>。</p>\\n<p>从<strong>设计的角度</strong>来看，这一阶段可能是整个开发过程中<strong>最重要的部分</strong>。</p>","autoDesc":true}');export{B as comp,y as data};
