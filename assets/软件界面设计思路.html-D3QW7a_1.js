import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o}from"./app-ROPDmvpc.js";const r="/assets/640-gb-KeY5g.jpeg",A="/assets/640-1698059914377-3-lczsYfcZ.jpg",n="/assets/AVz-wQaW2jCwAAAAAAAAAAAAAARQnAQ-CMOMisoL.png",p="/assets/original-mMus4reA.png",s={};function c(l,t){return o(),a("div",null,t[0]||(t[0]=[i('<h2 id="软件界面设计思路" tabindex="-1"><a class="header-anchor" href="#软件界面设计思路"><span>软件界面设计思路</span></a></h2><h3 id="软件界面组成" tabindex="-1"><a class="header-anchor" href="#软件界面组成"><span>软件界面组成</span></a></h3><figure><img src="'+r+'" alt="组件组成" tabindex="0" loading="lazy"><figcaption>组件组成</figcaption></figure><p>可以把功能或者需求类似的有机体封装成一个业务组件，并对外暴露接口来实现灵活的可定制性，就可以在不同页面不同子系统中复用同样的逻辑和功能了。</p><p>同理，不同页面中往往有可能出现视觉或者交互完全相同或者类似的区块，为了提高可复用性和提高开发效率，往往会基于基础组件和业务组件再进行一次封装，让其成为一个独立的区块以便直接复用。</p><p>通过这样一层层封装，就逐渐搭建了一套完整的组件化系统。</p><p>他们之间的关系如下。</p><figure><img src="'+A+'" alt="组件关系" tabindex="0" loading="lazy"><figcaption>组件关系</figcaption></figure><h2 id="ui设计" tabindex="-1"><a class="header-anchor" href="#ui设计"><span>UI设计</span></a></h2><p><a href="https://antv.antgroup.com/specification/language/basic" target="_blank" rel="noopener noreferrer">参考</a></p><p>在数据可视化设计中，布局了决定用户的阅读顺序。我们的大脑每天都要处理海量信息，眼睛会倾向于通过扫视来获取重要信息，扫视的视线流一般是从左至右、从上往下。</p><p>组件的重要层级有四类：次要信息、辅助信息、正文、强调信息。通过增加透明度来区分。</p><figure><img src="'+n+'" alt="信息层级" tabindex="0" loading="lazy"><figcaption>信息层级</figcaption></figure><p>在数据可视化领域中，数据与颜色的映射是非常重要的一个环节。颜色有三个视觉通道，分别是色调（H）、饱和度（S）、明度（B），不同的视觉通道可以与不同的数据类型建议关联。</p><p><strong>色调（H）：</strong> 通常使用颜色中的不同色调来描述不同的分类数据，如水果品类中苹果映射为红色、香蕉映射为黄色、梨映射为绿色，将品类与色调（H）建立了关联。</p><p><strong>饱和度（S）/ 明度（B）：</strong> 颜色通过明暗和饱和度的共同变化来描述有序或数值型的连续数据，比如身高由低到高或由 160cm 到 180 cm 的颜色映射为由浅到深，将连续变化与颜色的明暗饱和变化建立关联。</p><table><thead><tr><th>颜色属性</th><th></th><th>关系</th><th>数据类型</th><th></th></tr></thead><tbody><tr><td>色调（H）</td><td><img src="https://gw.alipayobjects.com/mdn/rms_a8a5bf/afts/img/A*LzQNQZujjiQAAAAAAAAAAAAAARQnAQ" alt="色调" loading="lazy"></td><td>=</td><td>分类型</td><td>如 🍎、🍌、🍐</td></tr><tr><td>饱和度（S）</td><td><img src="https://gw.alipayobjects.com/mdn/rms_a8a5bf/afts/img/A*ck2OTaHH7Q4AAAAAAAAAAAAAARQnAQ" alt="饱和度" loading="lazy"></td><td>=</td><td>有序型</td><td>如多少、高低、大小</td></tr><tr><td>明度（B）</td><td><img src="https://gw.alipayobjects.com/mdn/rms_a8a5bf/afts/img/A*Esq5T48gzX8AAAAAAAAAAAAAARQnAQ" alt="明度" loading="lazy"></td><td></td><td>数值型</td><td>如 9.5cm 、18 个</td></tr></tbody></table><p><a href="https://antv.antgroup.com/specification/tool/creater-color" target="_blank" rel="noopener noreferrer">参考</a></p><p>经典的配色理论，包括「邻近取色」「对比取色」「分裂互补取色」。</p><figure><img src="'+p+'" alt="取色逻辑" tabindex="0" loading="lazy"><figcaption>取色逻辑</figcaption></figure><p>邻近取色：其中邻近取色沿着一个方向，按照相同的夹角取色，其优点是色彩具有很强的规律感和和谐度，缺点是整体区分度比较低。</p><p>对比取色：相邻两个色彩是一组成180度的对比色，其优点是色板具有很强的区分度，缺点是相邻两色会误以为是一组对比数据。</p><p>分裂互补取色：三个一组取色，前两个颜色是一组邻近色，第三个颜色是前两个颜色共同的对比色，这种取色方式兼顾了邻近色的和谐同时又有较高的区分度，没有明显的劣势。</p>',23)]))}const g=e(s,[["render",c],["__file","软件界面设计思路.html.vue"]]),h=JSON.parse('{"path":"/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF.html","title":"UI 设计","lang":"zh-CN","frontmatter":{"title":"UI 设计","date":"2023-10-23T00:00:00.000Z","category":"软件开发","tag":["组件设计","软件配色"],"description":"软件界面设计思路 软件界面组成 组件组成组件组成 可以把功能或者需求类似的有机体封装成一个业务组件，并对外暴露接口来实现灵活的可定制性，就可以在不同页面不同子系统中复用同样的逻辑和功能了。 同理，不同页面中往往有可能出现视觉或者交互完全相同或者类似的区块，为了提高可复用性和提高开发效率，往往会基于基础组件和业务组件再进行一次封装，让其成为一个独立的区块...","head":[["meta",{"property":"og:url","content":"https://mioor.top/posts/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BD%AF%E4%BB%B6%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF.html"}],["meta",{"property":"og:site_name","content":"MIOOR"}],["meta",{"property":"og:title","content":"UI 设计"}],["meta",{"property":"og:description","content":"软件界面设计思路 软件界面组成 组件组成组件组成 可以把功能或者需求类似的有机体封装成一个业务组件，并对外暴露接口来实现灵活的可定制性，就可以在不同页面不同子系统中复用同样的逻辑和功能了。 同理，不同页面中往往有可能出现视觉或者交互完全相同或者类似的区块，为了提高可复用性和提高开发效率，往往会基于基础组件和业务组件再进行一次封装，让其成为一个独立的区块..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gw.alipayobjects.com/mdn/rms_a8a5bf/afts/img/A*LzQNQZujjiQAAAAAAAAAAAAAARQnAQ"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T06:58:45.000Z"}],["meta",{"property":"article:author","content":"MIOOR"}],["meta",{"property":"article:tag","content":"组件设计"}],["meta",{"property":"article:tag","content":"软件配色"}],["meta",{"property":"article:published_time","content":"2023-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T06:58:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UI 设计\\",\\"image\\":[\\"https://gw.alipayobjects.com/mdn/rms_a8a5bf/afts/img/A*LzQNQZujjiQAAAAAAAAAAAAAARQnAQ\\",\\"https://gw.alipayobjects.com/mdn/rms_a8a5bf/afts/img/A*ck2OTaHH7Q4AAAAAAAAAAAAAARQnAQ\\",\\"https://gw.alipayobjects.com/mdn/rms_a8a5bf/afts/img/A*Esq5T48gzX8AAAAAAAAAAAAAARQnAQ\\"],\\"datePublished\\":\\"2023-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-29T06:58:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MIOOR\\",\\"url\\":\\"http://mioor.top\\"}]}"]]},"headers":[{"level":2,"title":"软件界面设计思路","slug":"软件界面设计思路","link":"#软件界面设计思路","children":[{"level":3,"title":"软件界面组成","slug":"软件界面组成","link":"#软件界面组成","children":[]}]},{"level":2,"title":"UI设计","slug":"ui设计","link":"#ui设计","children":[]}],"git":{"createdTime":1730116452000,"updatedTime":1730185125000,"contributors":[{"name":"MIOOR","email":"yangwenyao07@gmail.com","commits":3}]},"readingTime":{"minutes":3.09,"words":926},"filePathRelative":"posts/软件开发/软件界面设计思路.md","localizedDate":"2023年10月23日","excerpt":"<h2>软件界面设计思路</h2>\\n<h3>软件界面组成</h3>\\n<figure><figcaption>组件组成</figcaption></figure>\\n<p>可以把功能或者需求类似的有机体封装成一个业务组件，并对外暴露接口来实现灵活的可定制性，就可以在不同页面不同子系统中复用同样的逻辑和功能了。</p>\\n<p>同理，不同页面中往往有可能出现视觉或者交互完全相同或者类似的区块，为了提高可复用性和提高开发效率，往往会基于基础组件和业务组件再进行一次封装，让其成为一个独立的区块以便直接复用。</p>\\n<p>通过这样一层层封装，就逐渐搭建了一套完整的组件化系统。</p>\\n<p>他们之间的关系如下。</p>","autoDesc":true}');export{g as comp,h as data};
