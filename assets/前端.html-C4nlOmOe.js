import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as s,e as t,d as e,r as h,o as r}from"./app-ROPDmvpc.js";const p="/assets/image-20240227164446972-c-jZbWzo.png",d="/assets/image-20240116093607490-LKnAzqs2.png",k="/assets/image-20240116093708849-C7zZNVYt.png",o="/assets/image-20240116092601533-1729674154813-5-CkRy8EsV.png",g={};function c(A,i){const a=h("Mermaid");return r(),l("div",null,[i[0]||(i[0]=s("h3",{id:"前端需求梳理流程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前端需求梳理流程"},[s("span",null,"前端需求梳理流程")])],-1)),i[1]||(i[1]=s("p",null,[s("a",{href:"https://requirement-design.ppt.chengpeiquan.com/1",target:"_blank",rel:"noopener noreferrer"},"参考")],-1)),i[2]||(i[2]=s("p",null,"六个梳理需求的步骤：",-1)),t(a,{id:"mermaid-9",code:"eJxLL0osyFAIceLiMtR4Oafh2campx1tz+ZN0FTQ1bVTMNJ42jX/RfPeZ4s2P5/QBhEz1ni2tfH5iu4X6/a9WLcQImai8Xz3jKcd254tBOrdBhEz1Xi6rufptJbnu9tedDVBxMw0ni7pfbF+97Np7c8WLtbkAgCpjj0B"}),i[3]||(i[3]=e('<p>功能梳理</p><figure><img src="'+p+`" alt="金字塔分析法" tabindex="0" loading="lazy"><figcaption>金字塔分析法</figcaption></figure><p>流程设计</p><p>每个流程图只对一个模块的工作思路，应分为正常流程和异常流程。</p><p>完善细节</p><ul><li><p>需求的基本信息</p><p>需求目的，迭代记录</p></li><li><p>模块的具体信息</p><p>输入条件考虑，数据组织方式，交互效果</p></li><li><p>其他辅助信息</p><p>名称解释</p></li></ul><p>复读文档</p><p>检查关键词是否清晰一致。</p><p>逻辑流程是否有误。</p><p>描述是否简洁。</p><p>是否偏离需求。</p><h4 id="参考资源" tabindex="-1"><a class="header-anchor" href="#参考资源"><span>参考资源</span></a></h4><p>产品经验，新手入门：<a href="https://www.woshipm.com" target="_blank" rel="noopener noreferrer">人人都是产品经理</a></p><p>设计师社区，设计思路参考：<a href="https://www.zcool.com.cn" target="_blank" rel="noopener noreferrer">站酷</a></p><p>互联网八卦：<a href="https://www.tmtpost.com" target="_blank" rel="noopener noreferrer">钛媒体</a></p><h3 id="tresjs-安装指南" tabindex="-1"><a class="header-anchor" href="#tresjs-安装指南"><span>TresJS 安装指南</span></a></h3><p><a href="https://tresjs.org/" target="_blank" rel="noopener noreferrer">网址</a></p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># TresJS (Vue3版)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> three</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @tresjs/core</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># TresJS在TS里的类型系统</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @types/three</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p>在 Vite 的 <code>vite.config.ts</code> 里配置相关参数</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">templateCompilerOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@tresjs/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Other config</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">      ...</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">templateCompilerOptions</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react、flux、redux-概念之间的关系" tabindex="-1"><a class="header-anchor" href="#react、flux、redux-概念之间的关系"><span>React、Flux、Redux 概念之间的关系</span></a></h3><p><a href="https://www.zhihu.com/question/47686258/answer/107209140" target="_blank" rel="noopener noreferrer">参考</a></p><p>早期前端的 View 是根据后端的 state 来刷新整个页面。</p>`,25)),t(a,{id:"mermaid-104",code:"eJxLL0osyFDwCeIyjH46oe/56vWxCrq6djVKxSWJJan6eanlCmCWUo2CUfTTzl6QAi4jsJLE5JLM/LwaBUMuAJihGeI="}),i[4]||(i[4]=e(`<p>优点：前端只负责刷新页面，逻辑简单（单向流）。</p><p>缺点：当页面变复杂后，每次刷新都会耗费巨大资源。</p><p>解决方案：React 通过虚拟 DOM 来更新页面解决了每次刷新都会耗费巨大资源的问题。</p><h3 id="js-的-excel-处理库" tabindex="-1"><a class="header-anchor" href="#js-的-excel-处理库"><span>JS 的 Excel 处理库</span></a></h3><p><a href="https://sheetjs.com/" target="_blank" rel="noopener noreferrer">网址</a></p><h4 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1"><span>安装</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xlsx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://cdn.sheetjs.com/xlsx-0.20.1/xlsx-0.20.1.tgz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h4><p><code>XLSX.read(data, options)</code></p><p><code>data</code> 为文本数据；<a href="https://docs.sheetjs.com/docs/api/parse-options#input-type" target="_blank" rel="noopener noreferrer"><code>options</code></a> 是一些可选参数，默认文件格式为 Base64，如果为 UTF-8，则需指定 <a href="https://docs.sheetjs.com/docs/api/parse-options#input-type" target="_blank" rel="noopener noreferrer"><code>type</code></a> 为 string. 返回一个 <a href="https://docs.sheetjs.com/docs/csf/book/" target="_blank" rel="noopener noreferrer">workbook</a> 对象。</p><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fileList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 读取文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> reader</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileReader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readAsText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">raw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理文件内容</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    reader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 解析文件内容</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> fileString</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> content</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fileString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;string&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 接下来可对文件内容进行处理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> array</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 此处是将B1 - B3的数字提取到数组中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 默认B1开始</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">          array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Sheets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Sheet1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">][</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`B</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="threejs" tabindex="-1"><a class="header-anchor" href="#threejs"><span>Threejs</span></a></h3><h4 id="threejs-中的光源" tabindex="-1"><a class="header-anchor" href="#threejs-中的光源"><span>Threejs 中的光源</span></a></h4><table><thead><tr><th>名字</th><th>描述</th><th>能否创建阴影</th></tr></thead><tbody><tr><td>THREE.AmbientLight</td><td>这是一个基本光源，该光源的颜色将会叠加到场景现有物体的颜色上</td><td></td></tr><tr><td>THREE.PointLight</td><td>这是一个点光源，从空间的一点向所有方向发射光线。点光源不能用来创建阴影</td><td></td></tr><tr><td>THREE.SpotLight</td><td>这种光源有聚光的效果，类似台灯、天花板上的品灯或者手电筒。这种光源可以投射阴影</td><td>能</td></tr><tr><td>THREE.DirectionalLight</td><td>这种光源也称作无限光。从这种光源发出的光线可以看作是平行的，打个比方，就像太阳光，这种光源也可以用来创建阴影</td><td>能</td></tr><tr><td>THREE.HemisphereLight</td><td>这是一种特殊的光源，可以通过模拟反光面和光线微弱的天空来创建更加自然的室外光线。这个光源也不提供任何与阴影相关的功能</td><td></td></tr><tr><td>THREE.AreaLight</td><td>使用这种光源可以指定散发光线的平面，而不是一个点。AreaLight 不投射任何阴影</td><td></td></tr><tr><td>THREE.LensFlare</td><td>这不是一种光源，但是通过使用 THREE.LensFare，可以为场景中的光源添加镜头光晕效果</td><td></td></tr></tbody></table><h4 id="threejs中的材质" tabindex="-1"><a class="header-anchor" href="#threejs中的材质"><span>Threejs中的材质</span></a></h4><table><thead><tr><th>名称</th><th>描述</th><th>是否受光照影响</th></tr></thead><tbody><tr><td>MeshBasicMaterial（网格基瑞材质）</td><td>基础材质，用于给几何体赋予一种简单的颜色，可者显示几何体的线框</td><td></td></tr><tr><td>MeshDepthMaterial（网格深度材质）</td><td>这个材质使用从摄像机到网格的距离来决定如响给网格上色</td><td></td></tr><tr><td>MeshNormalMaterial（网格法向材质）</td><td>这是一种简单的材质，根据法向向量计算物体表面的颜色</td><td></td></tr><tr><td>MeshLambertMaterial（网格Lambert材质）</td><td>这是一种考虑光照影响的材质，用于创建略淡的、不光亮的物体</td><td>是</td></tr><tr><td>MeshPhongMaterial（网格Phong式材质）</td><td>这是一种考虑光照影响的材质，用于创建光亮的物体</td><td>是</td></tr><tr><td>MeshStandardMaterial（网格标准材质）</td><td>这种标准材质使用“基于物理的渲染（PBR）”算法来绘制物体表面。它能够计算出表面与光线的正确互动关系，从而使渲染出的物体看起来更加真实</td><td>是</td></tr><tr><td>MeshPhysicalMaterial（网格物理材质）</td><td>这是 MeshStandardMaterial 的扩展材质，它为光线反射计算模型提供了更多的控制</td><td>是</td></tr><tr><td>MeshToonMaterial（网格卡通材质）</td><td>这是 MehPhongMaterial 的扩展材质，它使得物体渲染更加卡通化</td><td>是</td></tr><tr><td>ShadowMaterial（阴影材质）</td><td>这是一个专门用于接收阴影图的特殊材质。在该材质中只有阴影图像，非阴影部分为完全透明的区城</td><td></td></tr><tr><td>ShaderMaterial（着色器材质）</td><td>这种材质允许使用自定义的着色器程序，直接控制顶点的放置方式以及像素的着色方式</td><td></td></tr><tr><td>LineBasicMaterial（直线基础材质）</td><td>这种材质可以用于 THREE.Line（直线）几何体，用来创建着色的线</td><td></td></tr><tr><td>LineDashMaterial（虚线材质）</td><td>这种材质与 LineBasicMaterial（直线基础材质）一样，但允许创键出一种虚线的效果</td><td></td></tr></tbody></table><p>哑光材质在 Threejs 和 KeyShot 里渲染较为一致。</p><h3 id="lego" tabindex="-1"><a class="header-anchor" href="#lego"><span>Lego</span></a></h3><p><a href="https://tech.meituan.com/2018/01/09/lego-api-test.html" target="_blank" rel="noopener noreferrer">参考</a></p><h4 id="lego-的组成" tabindex="-1"><a class="header-anchor" href="#lego-的组成"><span>Lego 的组成</span></a></h4>`,21)),t(a,{id:"mermaid-401",code:"eJxLL0osyFDwCeIyjPZJTc+PVdDV1VUwilZ6vnfiy4VbNZ5t7X6xfurzWS2hnppKsVyGYGnjaKUXLbOezVmDkIbwQUoATeokRQ=="}),i[5]||(i[5]=e('<p>具体构成</p><figure><img src="'+d+'" alt="依赖关系" tabindex="0" loading="lazy"><figcaption>依赖关系</figcaption></figure><figure><img src="'+k+'" alt="整体框架" tabindex="0" loading="lazy"><figcaption>整体框架</figcaption></figure><h4 id="lego-测试用例执行流程" tabindex="-1"><a class="header-anchor" href="#lego-测试用例执行流程"><span>Lego 测试用例执行流程</span></a></h4><figure><img src="'+o+'" alt="执行流程" tabindex="0" loading="lazy"><figcaption>执行流程</figcaption></figure>',5))])}const m=n(g,[["render",c],["__file","前端.html.vue"]]),u=JSON.parse('{"path":"/posts/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF.html","title":"前端杂记","lang":"zh-CN","frontmatter":{"title":"前端杂记","date":"2024-03-04T00:00:00.000Z","category":"前端","tag":["前端需求梳理","TresJS","Excel 处理库","Threejs","前端数据流的处理","Lego"],"description":"前端需求梳理流程 参考 六个梳理需求的步骤： 功能梳理 金字塔分析法金字塔分析法 流程设计 每个流程图只对一个模块的工作思路，应分为正常流程和异常流程。 完善细节 需求的基本信息 需求目的，迭代记录 模块的具体信息 输入条件考虑，数据组织方式，交互效果 其他辅助信息 名称解释 复读文档 检查关键词是否清晰一致。 逻辑流程是否有误。 描述是否简洁。 是否...","head":[["meta",{"property":"og:url","content":"https://mioor.top/posts/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF.html"}],["meta",{"property":"og:site_name","content":"MIOOR"}],["meta",{"property":"og:title","content":"前端杂记"}],["meta",{"property":"og:description","content":"前端需求梳理流程 参考 六个梳理需求的步骤： 功能梳理 金字塔分析法金字塔分析法 流程设计 每个流程图只对一个模块的工作思路，应分为正常流程和异常流程。 完善细节 需求的基本信息 需求目的，迭代记录 模块的具体信息 输入条件考虑，数据组织方式，交互效果 其他辅助信息 名称解释 复读文档 检查关键词是否清晰一致。 逻辑流程是否有误。 描述是否简洁。 是否..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T08:48:57.000Z"}],["meta",{"property":"article:author","content":"MIOOR"}],["meta",{"property":"article:tag","content":"前端需求梳理"}],["meta",{"property":"article:tag","content":"TresJS"}],["meta",{"property":"article:tag","content":"Excel 处理库"}],["meta",{"property":"article:tag","content":"Threejs"}],["meta",{"property":"article:tag","content":"前端数据流的处理"}],["meta",{"property":"article:tag","content":"Lego"}],["meta",{"property":"article:published_time","content":"2024-03-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T08:48:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端杂记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T08:48:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MIOOR\\",\\"url\\":\\"http://mioor.top\\"}]}"]]},"headers":[{"level":3,"title":"前端需求梳理流程","slug":"前端需求梳理流程","link":"#前端需求梳理流程","children":[]},{"level":3,"title":"TresJS 安装指南","slug":"tresjs-安装指南","link":"#tresjs-安装指南","children":[]},{"level":3,"title":"React、Flux、Redux 概念之间的关系","slug":"react、flux、redux-概念之间的关系","link":"#react、flux、redux-概念之间的关系","children":[]},{"level":3,"title":"JS 的 Excel 处理库","slug":"js-的-excel-处理库","link":"#js-的-excel-处理库","children":[]},{"level":3,"title":"Threejs","slug":"threejs","link":"#threejs","children":[]},{"level":3,"title":"Lego","slug":"lego","link":"#lego","children":[]}],"git":{"createdTime":1730116452000,"updatedTime":1730450937000,"contributors":[{"name":"MIOOR","email":"yangwenyao07@gmail.com","commits":4}]},"readingTime":{"minutes":4.92,"words":1476},"filePathRelative":"posts/前端/前端.md","localizedDate":"2024年3月4日","excerpt":"<h3>前端需求梳理流程</h3>\\n<p><a href=\\"https://requirement-design.ppt.chengpeiquan.com/1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考</a></p>\\n<p>六个梳理需求的步骤：</p>\\n<p>功能梳理</p>\\n<figure><figcaption>金字塔分析法</figcaption></figure>\\n<p>流程设计</p>\\n<p>每个流程图只对一个模块的工作思路，应分为正常流程和异常流程。</p>\\n<p>完善细节</p>\\n<ul>\\n<li>\\n<p>需求的基本信息</p>\\n<p>需求目的，迭代记录</p>\\n</li>\\n<li>\\n<p>模块的具体信息</p>\\n<p>输入条件考虑，数据组织方式，交互效果</p>\\n</li>\\n<li>\\n<p>其他辅助信息</p>\\n<p>名称解释</p>\\n</li>\\n</ul>","autoDesc":true}');export{m as comp,u as data};
